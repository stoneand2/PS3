unique_groups <- as.character(unique(dataset[, separation.variable]))
# Null vector to be filled with number of observations within each group
polls_in_each_group <- NULL
# Blank plot with margins appropriate for number of groups
plot(NULL, main = paste("Polls organized by", separation.variable), xlim = c(0.5, length(unique_groups) + 0.5),
ylim = c(min(dataset[, measurement.variable]) - 2, max(dataset[, measurement.variable]) + 0.5),
xlab="Index value of polling group", ylab=measurement.variable)
# For-loop to plot points
for (i in 1:length(unique_groups)) {
polls_in_each_group[i] <- sum((dataset[, separation.variable] == unique_groups[i]) / 1)
points(jitter(rep(i, polls_in_each_group[i]), 8),
dataset[which(dataset[, separation.variable] == unique_groups[i]), measurement.variable],
col = i, pch = 19)
}
}
polling_function("Population", "Predict.Obama", dataset)
polling_function <- function(separation.variable, measurement.variable, dataset) {
# Gets unique groups to separate by
unique_groups <- as.character(unique(dataset[, separation.variable]))
# Null vector to be filled with number of observations within each group
polls_in_each_group <- NULL
# Blank plot with margins appropriate for number of groups
plot(NULL, main = paste("Polls organized by", separation.variable), xlim = c(0.5, length(unique_groups) + 0.5),
ylim = c(min(dataset[, measurement.variable]) - 2, max(dataset[, measurement.variable]) + 0.5),
xlab="Jittered index value of polling group", ylab=measurement.variable)
# For-loop to plot points
for (i in 1:length(unique_groups)) {
polls_in_each_group[i] <- sum((dataset[, separation.variable] == unique_groups[i]) / 1)
points(jitter(rep(i, polls_in_each_group[i]), 8),
dataset[which(dataset[, separation.variable] == unique_groups[i]), measurement.variable],
col = i, pch = 19)
}
}
polling_function <- function(separation.variable, measurement.variable, dataset) {
# Gets unique groups to separate by
unique_groups <- as.character(unique(dataset[, separation.variable]))
# Null vector to be filled with number of observations within each group
polls_in_each_group <- NULL
# Blank plot with margins appropriate for number of groups
plot(NULL, main = paste("Polls organized by", separation.variable), xlim = c(0.5, length(unique_groups) + 0.5),
ylim = c(min(dataset[, measurement.variable]) - 2, max(dataset[, measurement.variable]) + 0.5),
xlab=paste("Jittered index value of type of",separation.variable), ylab=measurement.variable)
# For-loop to plot points
for (i in 1:length(unique_groups)) {
polls_in_each_group[i] <- sum((dataset[, separation.variable] == unique_groups[i]) / 1)
points(jitter(rep(i, polls_in_each_group[i]), 8),
dataset[which(dataset[, separation.variable] == unique_groups[i]), measurement.variable],
col = i, pch = 19)
}
}
polling_function("Pollster", "Romney", dataset)
polling_function <- function(separation.variable, measurement.variable, dataset) {
# Gets unique groups to separate by
unique_groups <- as.character(unique(dataset[, separation.variable]))
# Null vector to be filled with number of observations within each group
polls_in_each_group <- NULL
# Blank plot with margins appropriate for number of groups
plot(NULL, main = paste("Polls organized by", separation.variable), xlim = c(0.5, length(unique_groups) + 0.5),
ylim = c(min(dataset[, measurement.variable]) - 2, max(dataset[, measurement.variable]) + 0.5),
xlab=paste("Jittered Index Value of Type of",separation.variable), ylab=measurement.variable)
# For-loop to plot points
for (i in 1:length(unique_groups)) {
polls_in_each_group[i] <- sum((dataset[, separation.variable] == unique_groups[i]) / 1)
points(jitter(rep(i, polls_in_each_group[i]), 8),
dataset[which(dataset[, separation.variable] == unique_groups[i]), measurement.variable],
col = i, pch = 19)
}
}
polling_function("Pollster", "Predict.Obama", dataset)
polling_function("Pollster", "Romney", dataset)
polling_function("Population", "Predict.Obama", dataset)
setwd("~/github/PS3") # Setting working directory
x <- NULL
x == NULL
x <- 1
x == c(1,2,3)
x %in% c(1,2,3)
Door_Object <- function(whichdoor=NULL){
if(whichdoor %in% c(1,2,3)){
doorchoice <- list(choice=whichdoor)
return(doorchoice)
}
else{
print("Hi")
}
}
Door_Object(1)
Door_Object(7)
Door_Object()
Door_Object <- function(whichdoor=NA){
if(whichdoor %in% c(1,2,3)){
doorchoice <- list(choice=whichdoor)
return(doorchoice)
}
else{
print("Hi")
}
}
Door_Object()
sample(c(1,2,3), 1)
sample(c(1,2,3), 1)
sample(c(1,2,3), 1)
sample(c(1,2,3), 1)
sample(c(1,2,3), 1)
sample(c(1,2,3), 1)
Door_Object <- function(whichdoor=NA){
if(whichdoor %in% c(1,2,3)){
doorchoice <- list(choice=whichdoor)
return(doorchoice)
}
else{
draw <- sample(c(1,2,3), 1)
doorchoice <- list(choice=draw)
return(doorchoice)
print(paste("Your door choice was randomly assigned to be", draw))
}
}
Door_Object()
Door_Object <- function(whichdoor=NA){
if(whichdoor %in% c(1,2,3)){
doorchoice <- list(choice=whichdoor)
return(doorchoice)
}
else{
draw <- sample(c(1,2,3), 1)
doorchoice <- list(choice=draw)
print(paste("Your door choice was randomly assigned to be", draw))
return(doorchoice)
}
}
Door_Object()
Door_Object <- function(whichdoor=NA){
if(whichdoor %in% c(1,2,3)){
doorchoice <- list(choice=whichdoor)
return(doorchoice)
}
else{
draw <- sample(c(1,2,3), 1)
doorchoice <- list(choice=draw)
print(paste("Your door choice was randomly assigned to be", draw))
return(doorchoice)
}
}
Door_Object()
Door_Object()
Door_Object()
Door_Object <- function(whichdoor=NA){
if(whichdoor %in% c(1,2,3)){
doorchoice <- list(choice=whichdoor)
class(doorchoice) <- "door"
return(doorchoice)
}
else{
draw <- sample(c(1,2,3), 1)
doorchoice <- list(choice=draw)
class(doorchoice) <- "door"
print(paste("Your door was randomly assigned to be", draw))
return(doorchoice)
}
}
Door_Object()
object.door <- Door_Object()
object.door
object.door$choice
class(object.door$choice)
class(object.door)
PlayGame <- function(x){
print("PlayGame generic.")
UseMethod("PlayGame", x)
}
PlayGame.default <- function(x){
print("This object doesn't have an associated method. Check method(\"PlayGame\") to see what does.")
return(x)
}
PlayGame(object.door)
method('PlayGame')
methods('PlayGame')
PlayGame.door <- function(x){
print("This is a door object! Let's figure out if you won or lost.")
winning.door <- sample(c(1,2,3), 1)
if(winning.door == x$choice){
print(paste("Yay!",\n,"You win."))
}
else{
print("Sorry.")
}
}
PlayGame.door <- function(x){
print("This is a door object! Let's figure out if you won or lost.")
winning.door <- sample(c(1,2,3), 1)
if(winning.door == x$choice){
print(paste("Yay!\nYou win."))
}
else{
print("Sorry.")
}
}
PlayGame(object.door)
PlayGame <- function(x){
print("PlayGame called.")
UseMethod("PlayGame", x)
}
PlayGame(object.door)
PlayGame.door <- function(x){
print("This is a door object! Let's figure out if you won or lost.")
winning.door <- sample(c(1,2,3), 1)
if(winning.door == x$choice){
print(paste("The winning door is", winning.door, "you chose", x$choice))
print(paste("Yay!\nYou win."))
}
else{
print(paste("The winning door is", winning.door, "you chose", x$choice))
print("Sorry. You didn't choose the winning door. You got a ZONK!
\n Visit https://tinyurl.com/yourZONK to view your prize.")
}
}
PlayGame(object.door)
PlayGame.door <- function(x){
print("This is a door object! Let's figure out if you won or lost.")
winning.door <- sample(c(1,2,3), 1)
if(winning.door == x$choice){
print("Unveiling door....")
Sys.sleep(4)
print(paste("The winning door is", winning.door, ", unfortuntaely, you chose", x$choice,"."))
print(paste("Yay!\nYou win."))
}
else{
print("Unveiling door....")
Sys.sleep(4)
print(paste("The winning door is", winning.door, "you chose", x$choice))
print("Sorry. You didn't choose the winning door. You got a ZONK! \n Visit https://tinyurl.com/yourZONK to view your prize.")
}
}
PlayGame(object.door)
PlayGame.door <- function(x){
print("This is a door object! Let's figure out if you won or lost.")
winning.door <- sample(c(1,2,3), 1)
if(winning.door == x$choice){
print("Unveiling door....")
Sys.sleep(4)
print(paste("The winning door is", winning.door, "and you chose door", x$choice,"."))
print(paste("Yay! You win the car! Visit https://tinyurl.com/winningcar to view your prize."))
}
else{
print("Unveiling door....")
Sys.sleep(4)
print(paste("The winning door is", winning.door, "you chose", x$choice))
print("Sorry. You didn't choose the winning door. You got a ZONK! Visit https://tinyurl.com/yourZONK to view your prize.")
}
}
PlayGame(object.door)
PlayGame.door <- function(x){
print("This is a door object! Let's figure out if you won or lost.")
winning.door <- sample(c(1,2,3), 1)
if(winning.door == x$choice){
print(paste("Remember, you chose door number ", x$choice, ".", sep="")
print("Unveiling door....")
Sys.sleep(4)
print(paste("The winning door is ", winning.door,".", sep=""))
print(paste("Yay! You win the car! Visit https://tinyurl.com/winningcar to view your prize."))
}
else{
print(paste("Remember, you chose door number ", x$choice, ".", sep="")
print("Unveiling door....")
Sys.sleep(4)
print(paste("The winning door is", winning.door, ".", sep=""))
print("Sorry. You didn't choose the winning door. You got a ZONK! Visit https://tinyurl.com/yourZONK to view your prize.")
}
}
PlayGame.door <- function(x){
print("This is a door object! Let's figure out if you won or lost.")
winning.door <- sample(c(1,2,3), 1)
if(winning.door == x$choice){
print(paste("Remember, you chose door number ", x$choice, ".", sep=""))
print("Unveiling door....")
Sys.sleep(4)
print(paste("The winning door is ", winning.door,".", sep=""))
print(paste("Yay! You win the car! Visit https://tinyurl.com/winningcar to view your prize."))
}
else{
print(paste("Remember, you chose door number ", x$choice, ".", sep="")
print("Unveiling door....")
Sys.sleep(4)
PlayGame.door <- function(x){
print("This is a door object! Let's figure out if you won or lost.")
winning.door <- sample(c(1,2,3), 1)
if(winning.door == x$choice){
print(paste("Remember, you chose door number ", x$choice, ".", sep=""))
print("Unveiling door....")
Sys.sleep(4)
print(paste("The winning door is ", winning.door,".", sep=""))
print(paste("Yay! You win the car! Visit https://tinyurl.com/winningcar to view your prize."))
}
else{
print(paste("Remember, you chose door number ", x$choice, ".", sep=""))
print("Unveiling door....")
Sys.sleep(4)
print(paste("The winning door is", winning.door, ".", sep=""))
print("Sorry. You didn't choose the winning door. You got a ZONK! Visit https://tinyurl.com/yourZONK to view your prize.")
}
}
PlayGame(object.door)
PlayGame.door <- function(x){
print("This is a door object! Let's figure out if you won or lost.")
winning.door <- sample(c(1,2,3), 1)
if(winning.door == x$choice){
print(paste("Remember, you chose door number ", x$choice, ".", sep=""))
print("Unveiling door....")
Sys.sleep(4)
print(paste("The winning door is ", winning.door,".", sep=""))
print("Yay! You win the car!")
print("Visit https://tinyurl.com/winningcar to view your prize.")
}
else{
print(paste("Remember, you chose door number ", x$choice, ".", sep=""))
print("Unveiling door....")
Sys.sleep(4)
print(paste("The winning door is", winning.door, ".", sep=""))
print("Sorry. You didn't choose the winning door. You got a ZONK!")
print("Visit https://tinyurl.com/yourZONK to view your prize.")
}
}
PlayGame(object.door)
PlayGame(object.door)
PlayGame.door <- function(x){
print("This is a door object! Let's figure out if you won or lost.")
winning.door <- sample(c(1,2,3), 1)
if(winning.door == x$choice){
print(paste("Remember, you chose door number ", x$choice, ".", sep=""))
print("Unveiling door....")
Sys.sleep(4)
print(paste("The winning door is door number ", winning.door,".", sep=""))
print("Yay! You win the car!")
print("Visit https://tinyurl.com/winningcar to view your prize.")
}
else{
print(paste("Remember, you chose door number ", x$choice, ".", sep=""))
print("Unveiling door....")
Sys.sleep(4)
print(paste("The winning door is door number ", winning.door, ".", sep=""))
print("Sorry. You didn't choose the winning door. You got a ZONK!")
print("Visit https://tinyurl.com/yourZONK to view your prize.")
}
}
PlayGame(object.door)
PlayGame.door <- function(x){
print("This is a door object! Let's figure out if you won or lost.")
winning.door <- sample(c(1,2,3), 1)
if(winning.door == x$choice){
print(paste("Remember, you chose door number ", x$choice, ".", sep=""))
print("Unveiling door....")
Sys.sleep(1)
print("....")
Sys.sleep(1)
print(paste("The winning door is door number ", winning.door,".", sep=""))
print("Yay! You win the car!")
print("Visit https://tinyurl.com/winningcar to view your prize.")
}
else{
print(paste("Remember, you chose door number ", x$choice, ".", sep=""))
print("Unveiling door....")
Sys.sleep(1)
print("....")
Sys.sleep(1)
print(paste("The winning door is door number ", winning.door, ".", sep=""))
print("Sorry. You didn't choose the winning door. You got a ZONK!")
print("Visit https://tinyurl.com/yourZONK to view your prize.")
}
}
PlayGame(object.door)
class(1)
class("1")
door <- setClass(Class="door", slots = c(x = "numeric"),
validity=function(object){
if((object@x < 0) || (object@y < 0)) {
return("A door choice not equal to the numeric 1, 2, or 3 was given.")
}
return(TRUE)
}
)
door()
door("b")
door <- setClass(Class="door", slots = c(x = "numeric"),
validity=function(object){
if(class(object@x) != "numeric") {
return("A door choice not equal to the numeric 1, 2, or 3 was given.")
}
return(TRUE)
}
)
door("b")
door(1)
door()
door(x=1)
door <- setClass(Class="door", slots = c(doorchoice = "numeric"),
validity=function(object){
if(class(object@doorchoice) != "numeric") {
return("A door choice not equal to the numeric 1, 2, or 3 was given.")
}
return(TRUE)
}
)
door(doorchoice=1)
door(doorchoice=4)
4 %in% c(1,2,3)
(4 %in% c(1,2,3)) == FALSE
door <- setClass(Class="door", slots = c(doorchoice = "numeric"),
validity=function(object){
if((object@doorchoice %in% c(1,2,3)) == FALSE) {
return("A door choice not equal to the numeric 1, 2, or 3 was given.")
}
return(TRUE)
}
)
door(doorchoice=4)
door(doorchoice=1)
test.door <- door(doorchoice=1)
test.door
test.door[1]
test.door@doorchoice
test.door@doorchoice <- 2
test.door@doorchoice <- 6
test.door@doorchoice
setValidity("door", function(object){
if((object@doorchoice %in% c(1,2,3)) == FALSE) {
return("A door choice not equal to the numeric 1, 2, or 3 was given.")
}
}
)
test.door
test.door <- door(doorchoice=1)
test.door <- door(doorchoice=6)
test.door <- door(doorchoice="a")
test.door <- door(doorchoice=2)
door <- setClass(Class="door", slots = c(doorchoice = "numeric"),
validity=function(object){
if((object@doorchoice %in% c(1,2,3)) == FALSE) {
return("A door choice not equal to the numeric 1, 2, or 3 was given.")
}
return(TRUE)
}
)
test.door <- door(doorchoice=1)
test.door <- door(doorchoice=6)
door <- setClass(Class="door", slots = c(doorchoice = "numeric"),
validity=function(object){
if((object@doorchoice %in% c(1,2,3)) == FALSE) {
return("A door choice not equal to the numeric 1, 2, or 3 was given.")
}
return(TRUE)
}
)
# door(doorchoice=1) # works
# door(doorchoice=4) # validity check determines not a valid door choice
# Validity function to make sure any changes to object of door class are okay
setValidity("door", function(object){
if((object@doorchoice %in% c(1,2,3)) == FALSE) {
return("A door choice not equal to the numeric 1, 2, or 3 was given.")
}
}
)
test.door <- door(doorchoice=1)
test.door <- door(doorchoice=6)
test.door@doorchoice
test.door@doorchoice <- 6
test.door@doorchoice
setValidity("door", function(object){
if((object@doorchoice %in% c(1,2,3)) == FALSE) {
return("A door choice not equal to the numeric 1, 2, or 3 was given.")
}
}
)
test.door <- door(doorchoice=1)
test.door
test.door@doorchoice
test.door@doorchoice <- 6
test.door
setClass(Class="Squares",
representation = representation( # representation() is a function
square = "numeric",
x="numeric",
y="numeric"
),
prototype = prototype( # prototype() is a function
square = c(),
x = c(),
y = c()
)
)
# Every time object edited, runs a test
setValidity("Squares", function(object){
added <- object@x^2 + object@y^2
subtracted <- object@x^2 - object@y^2
test1 <- all(object@square==added)
test2 <- all(object@square==subtracted)
if(!test1 & !test2){return("@square is not a valid value")}
}
)
setMethod("initialize", "Squares", function(.Object, ...) {
value = callNextMethod()
validObject(value)
return(value)
})
new("Squares")
new("Squares", square=13, x=3, y=2)
new("Squares", square="turtle",x=30,y=20)
new("Squares", square=14, x=3, y=2)
object <0 new("Squares", square=13, x=3, y=2)
nusquare <- new("Squares", square=13, x=3, y=2)
nusquare@square
nusquare@square <- 14
nusquare@square
